
/**
* File: CDM
* About: Description
* Console Draw Motor
* Library for creating 2D Games for the Windows CMD.
* For exclusive use with Windows. Not compatible for versions lower than Windows vista.
* This library only provides the C functions for drawing on the console, 
* and the structures for its usage.
*
* About: License
* This software is provided 'as-is', without any express or implied warranty.
* In no event will the authors be held liable for any damages arising from
* the use of this software.
*
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
*
* 1. The origin of this software must not be misrepresented; you must not claim
* that you wrote the original software. If you use this software in a product,
* an acknowledgment in the product documentation would be appreciated but is
* not required.
*
* 2. Altered source versions must be plainly marked as such, and must not be
* misrepresented as being the original software.
*
* 3. This notice may not be removed or altered from any source distribution.
*
* José María Pérez Parrillat 2017
*/

#pragma once
#include <Windows.h>

#pragma region Defines

//Macros for parameter usage description.
#define _IN_
#define _OUT_
#define _INOUT_
#define _OUTOPT_
#define _INOPT_
#define _INOUTOPT_

/**********************************************************************************************//**
 * \def	CLEAR
 *
 * \brief	This are color bytes. Use them for sprites along with the function SetPixel.
 **************************************************************************************************/

#define CLEAR				0

/**********************************************************************************************//**
 * \def	LETCOLOR1
 *
 * \brief	This values are for using a custom color scheme.
 **************************************************************************************************/

#define LETCOLOR1			0x0000			//0000

/**********************************************************************************************//**
 * \def	LETCOLOR2
 *
 * \brief	A macro that defines letcolor 2
 **************************************************************************************************/

#define LETCOLOR2			0x0001			//0001

/**********************************************************************************************//**
 * \def	LETCOLOR3
 *
 * \brief	A macro that defines letcolor 3
 **************************************************************************************************/

#define LETCOLOR3			0x0002			//0010

/**********************************************************************************************//**
 * \def	LETCOLOR4
 *
 * \brief	A macro that defines letcolor 4
 **************************************************************************************************/

#define LETCOLOR4			0x0003			//0011	

/**********************************************************************************************//**
 * \def	LETCOLOR5
 *
 * \brief	A macro that defines letcolor 5
 **************************************************************************************************/

#define LETCOLOR5			0x0004			//0100

/**********************************************************************************************//**
 * \def	LETCOLOR6
 *
 * \brief	A macro that defines letcolor 6
 **************************************************************************************************/

#define LETCOLOR6			0x0005			//0101

/**********************************************************************************************//**
 * \def	LETCOLOR7
 *
 * \brief	A macro that defines letcolor 7
 **************************************************************************************************/

#define LETCOLOR7			0x0006			//0110

/**********************************************************************************************//**
 * \def	LETCOLOR8
 *
 * \brief	A macro that defines letcolor 8
 **************************************************************************************************/

#define LETCOLOR8			0x0007			//0111

/**********************************************************************************************//**
 * \def	LETCOLOR9
 *
 * \brief	A macro that defines letcolor 9
 **************************************************************************************************/

#define LETCOLOR9			0x0008			//1000

/**********************************************************************************************//**
 * \def	LETCOLOR10
 *
 * \brief	A macro that defines letcolor 10
 **************************************************************************************************/

#define LETCOLOR10			0x0009			//1001

/**********************************************************************************************//**
 * \def	LETCOLOR11
 *
 * \brief	A macro that defines letcolor 11
 **************************************************************************************************/

#define LETCOLOR11			0x000A			//1010

/**********************************************************************************************//**
 * \def	LETCOLOR12
 *
 * \brief	A macro that defines letcolor 12
 **************************************************************************************************/

#define LETCOLOR12			0x000B			//1011

/**********************************************************************************************//**
 * \def	LETCOLOR13
 *
 * \brief	A macro that defines letcolor 13
 **************************************************************************************************/

#define LETCOLOR13			0x000C			//1100

/**********************************************************************************************//**
 * \def	LETCOLOR14
 *
 * \brief	A macro that defines letcolor 14
 **************************************************************************************************/

#define LETCOLOR14			0x000D			//1101

/**********************************************************************************************//**
 * \def	LETCOLOR15
 *
 * \brief	A macro that defines letcolor 15
 **************************************************************************************************/

#define LETCOLOR15			0x000E			//1110

/**********************************************************************************************//**
 * \def	LETCOLOR16
 *
 * \brief	A macro that defines letcolor 16
 **************************************************************************************************/

#define LETCOLOR16			0x000F			//1111

/**********************************************************************************************//**
 * \def	BACKCOLOR1
 *
 * \brief	A macro that defines backcolor 1
 **************************************************************************************************/

#define BACKCOLOR1			0x0000

/**********************************************************************************************//**
 * \def	BACKCOLOR2
 *
 * \brief	A macro that defines backcolor 2
 **************************************************************************************************/

#define BACKCOLOR2			0x0010

/**********************************************************************************************//**
 * \def	BACKCOLOR3
 *
 * \brief	A macro that defines backcolor 3
 **************************************************************************************************/

#define BACKCOLOR3			0x0020

/**********************************************************************************************//**
 * \def	BACKCOLOR4
 *
 * \brief	A macro that defines backcolor 4
 **************************************************************************************************/

#define BACKCOLOR4			0x0030

/**********************************************************************************************//**
 * \def	BACKCOLOR5
 *
 * \brief	A macro that defines backcolor 5
 **************************************************************************************************/

#define BACKCOLOR5			0x0040

/**********************************************************************************************//**
 * \def	BACKCOLOR6
 *
 * \brief	A macro that defines backcolor 6
 **************************************************************************************************/

#define BACKCOLOR6			0x0050

/**********************************************************************************************//**
 * \def	BACKCOLOR7
 *
 * \brief	A macro that defines backcolor 7
 **************************************************************************************************/

#define BACKCOLOR7			0x0060

/**********************************************************************************************//**
 * \def	BACKCOLOR8
 *
 * \brief	A macro that defines backcolor 8
 **************************************************************************************************/

#define BACKCOLOR8			0x0070

/**********************************************************************************************//**
 * \def	BACKCOLOR9
 *
 * \brief	A macro that defines backcolor 9
 **************************************************************************************************/

#define BACKCOLOR9			0x0080

/**********************************************************************************************//**
 * \def	BACKCOLOR10
 *
 * \brief	A macro that defines backcolor 10
 **************************************************************************************************/

#define BACKCOLOR10			0x0090

/**********************************************************************************************//**
 * \def	BACKCOLOR11
 *
 * \brief	A macro that defines backcolor 11
 **************************************************************************************************/

#define BACKCOLOR11			0x00A0

/**********************************************************************************************//**
 * \def	BACKCOLOR12
 *
 * \brief	A macro that defines backcolor 12
 **************************************************************************************************/

#define BACKCOLOR12			0x00B0

/**********************************************************************************************//**
 * \def	BACKCOLOR13
 *
 * \brief	A macro that defines backcolor 13
 **************************************************************************************************/

#define BACKCOLOR13			0x00C0

/**********************************************************************************************//**
 * \def	BACKCOLOR14
 *
 * \brief	A macro that defines backcolor 14
 **************************************************************************************************/

#define BACKCOLOR14			0x00D0

/**********************************************************************************************//**
 * \def	BACKCOLOR15
 *
 * \brief	A macro that defines backcolor 15
 **************************************************************************************************/

#define BACKCOLOR15			0x00E0

/**********************************************************************************************//**
 * \def	BACKCOLOR16
 *
 * \brief	A macro that defines backcolor 16
 **************************************************************************************************/

#define BACKCOLOR16			0x00F0

/**********************************************************************************************//**
 * \def	LBASEBLACK
 *
 * \brief	Use this ones if you aren't using a new scheme.
 **************************************************************************************************/

#define LBASEBLACK			LETCOLOR1

/**********************************************************************************************//**
 * \def	LBASEBLUE
 *
 * \brief	A macro that defines lbaseblue
 **************************************************************************************************/

#define LBASEBLUE			LETCOLOR2

/**********************************************************************************************//**
 * \def	LBASEGREEN
 *
 * \brief	A macro that defines lbasegreen
 **************************************************************************************************/

#define LBASEGREEN			LETCOLOR3

/**********************************************************************************************//**
 * \def	LBASECYAN
 *
 * \brief	A macro that defines lbasecyan
 **************************************************************************************************/

#define LBASECYAN			LETCOLOR4

/**********************************************************************************************//**
 * \def	LBASERED
 *
 * \brief	A macro that defines lbasered
 **************************************************************************************************/

#define LBASERED			LETCOLOR5

/**********************************************************************************************//**
 * \def	LBASEMAGENTA
 *
 * \brief	A macro that defines lbasemagenta
 **************************************************************************************************/

#define LBASEMAGENTA		LETCOLOR6

/**********************************************************************************************//**
 * \def	LBASEBROWN
 *
 * \brief	A macro that defines lbasebrown
 **************************************************************************************************/

#define LBASEBROWN			LETCOLOR7

/**********************************************************************************************//**
 * \def	LBASEGREY
 *
 * \brief	A macro that defines lbasegrey
 **************************************************************************************************/

#define LBASEGREY			LETCOLOR8

/**********************************************************************************************//**
 * \def	LBASEDARKGREY
 *
 * \brief	A macro that defines lbasedarkgrey
 **************************************************************************************************/

#define LBASEDARKGREY		LETCOLOR9

/**********************************************************************************************//**
 * \def	LBASELIGHTBLUE
 *
 * \brief	A macro that defines lbaselightblue
 **************************************************************************************************/

#define LBASELIGHTBLUE		LETCOLOR10

/**********************************************************************************************//**
 * \def	LBASELIGHTGREEN
 *
 * \brief	A macro that defines lbaselightgreen
 **************************************************************************************************/

#define LBASELIGHTGREEN		LETCOLOR11

/**********************************************************************************************//**
 * \def	LBASELIGHTCYAN
 *
 * \brief	A macro that defines lbaselightcyan
 **************************************************************************************************/

#define LBASELIGHTCYAN		LETCOLOR12

/**********************************************************************************************//**
 * \def	LBASELIGHTRED
 *
 * \brief	A macro that defines lbaselightred
 **************************************************************************************************/

#define LBASELIGHTRED		LETCOLOR13

/**********************************************************************************************//**
 * \def	LBASELIGHTMAGENTA
 *
 * \brief	A macro that defines lbaselightmagenta
 **************************************************************************************************/

#define LBASELIGHTMAGENTA	LETCOLOR14

/**********************************************************************************************//**
 * \def	LBASEYELLOW
 *
 * \brief	A macro that defines lbaseyellow
 **************************************************************************************************/

#define	LBASEYELLOW			LETCOLOR15

/**********************************************************************************************//**
 * \def	LBASEWHITE
 *
 * \brief	A macro that defines lbasewhite
 **************************************************************************************************/

#define LBASEWHITE			LETCOLOR16

/**********************************************************************************************//**
 * \def	BBASEBLACK
 *
 * \brief	A macro that defines bbaseblack
 **************************************************************************************************/

#define BBASEBLACK			BACKCOLOR1

/**********************************************************************************************//**
 * \def	BBASEBLUE
 *
 * \brief	A macro that defines bbaseblue
 **************************************************************************************************/

#define BBASEBLUE			BACKCOLOR2

/**********************************************************************************************//**
 * \def	BBASEGREEN
 *
 * \brief	A macro that defines bbasegreen
 **************************************************************************************************/

#define BBASEGREEN			BACKCOLOR3

/**********************************************************************************************//**
 * \def	BBASECYAN
 *
 * \brief	A macro that defines bbasecyan
 **************************************************************************************************/

#define BBASECYAN			BACKCOLOR4

/**********************************************************************************************//**
 * \def	BBASERED
 *
 * \brief	A macro that defines bbasered
 **************************************************************************************************/

#define BBASERED			BACKCOLOR5

/**********************************************************************************************//**
 * \def	BBASEMAGENTA
 *
 * \brief	A macro that defines bbasemagenta
 **************************************************************************************************/

#define BBASEMAGENTA		BACKCOLOR6

/**********************************************************************************************//**
 * \def	BBASEBROWN
 *
 * \brief	A macro that defines bbasebrown
 **************************************************************************************************/

#define BBASEBROWN			BACKCOLOR7

/**********************************************************************************************//**
 * \def	BBASEGREY
 *
 * \brief	A macro that defines bbasegrey
 **************************************************************************************************/

#define BBASEGREY			BACKCOLOR8

/**********************************************************************************************//**
 * \def	BBASEDARKGREY
 *
 * \brief	A macro that defines bbasedarkgrey
 **************************************************************************************************/

#define BBASEDARKGREY		BACKCOLOR9

/**********************************************************************************************//**
 * \def	BBASELIGHTBLUE
 *
 * \brief	A macro that defines bbaselightblue
 **************************************************************************************************/

#define BBASELIGHTBLUE		BACKCOLOR10

/**********************************************************************************************//**
 * \def	BBASELIGHTGREEN
 *
 * \brief	A macro that defines bbaselightgreen
 **************************************************************************************************/

#define BBASELIGHTGREEN		BACKCOLOR11

/**********************************************************************************************//**
 * \def	BBASELIGHTCYAN
 *
 * \brief	A macro that defines bbaselightcyan
 **************************************************************************************************/

#define BBASELIGHTCYAN		BACKCOLOR12

/**********************************************************************************************//**
 * \def	BBASELIGHTRED
 *
 * \brief	A macro that defines bbaselightred
 **************************************************************************************************/

#define BBASELIGHTRED		BACKCOLOR13

/**********************************************************************************************//**
 * \def	BBASELIGHTMAGENTA
 *
 * \brief	A macro that defines bbaselightmagenta
 **************************************************************************************************/

#define BBASELIGHTMAGENTA	BACKCOLOR14

/**********************************************************************************************//**
 * \def	BBASEYELLOW
 *
 * \brief	A macro that defines bbaseyellow
 **************************************************************************************************/

#define	BBASEYELLOW			BACKCOLOR15

/**********************************************************************************************//**
 * \def	BBASEWHITE
 *
 * \brief	A macro that defines bbasewhite
 **************************************************************************************************/

#define BBASEWHITE			BACKCOLOR16

/**********************************************************************************************//**
 * \def	ALPHACOLOR
 *
 * \brief	This is used for choosing an alpha.
 **************************************************************************************************/

#define ALPHACOLOR			100

/**********************************************************************************************//**
 * \def	CDMSET1
 *
 * \brief	Enumeration for quickly selecting data sets per pixel.
 **************************************************************************************************/

#define CDMSET1				0x0001

/**********************************************************************************************//**
 * \def	CDMSET2
 *
 * \brief	A macro that defines cdmset 2
 **************************************************************************************************/

#define CDMSET2				0x0002

/**********************************************************************************************//**
 * \def	CDMSET3
 *
 * \brief	A macro that defines cdmset 3
 **************************************************************************************************/

#define CDMSET3				0x0004

/**********************************************************************************************//**
 * \def	CDMSET4
 *
 * \brief	A macro that defines cdmset 4
 **************************************************************************************************/

#define CDMSET4				0x0008

/**********************************************************************************************//**
 * \def	CDMSETALPHA
 *
 * \brief	A macro that defines cdmsetalpha
 **************************************************************************************************/

#define CDMSETALPHA			0x0010

/**********************************************************************************************//**
 * \def	CDMTRUE
 *
 * \brief	Boolean implementation.
 **************************************************************************************************/

#define CDMTRUE				1

/**********************************************************************************************//**
 * \def	CDMFALSE
 *
 * \brief	A macro that defines cdmfalse
 **************************************************************************************************/

#define CDMFALSE			0

#pragma region Inputs

/**********************************************************************************************//**
 * \def	CDMA
 *
 * \brief	A macro that defines cdma
 **************************************************************************************************/

#define CDMA		0

/**********************************************************************************************//**
 * \def	CDMB
 *
 * \brief	A macro that defines cdmb
 **************************************************************************************************/

#define CDMB		1

/**********************************************************************************************//**
 * \def	CDMC
 *
 * \brief	A macro that defines cdmc
 **************************************************************************************************/

#define CDMC		2

/**********************************************************************************************//**
 * \def	CDMD
 *
 * \brief	A macro that defines cdmd
 **************************************************************************************************/

#define CDMD		3

/**********************************************************************************************//**
 * \def	CDME
 *
 * \brief	A macro that defines cdme
 **************************************************************************************************/

#define CDME		4

/**********************************************************************************************//**
 * \def	CDMF
 *
 * \brief	A macro that defines cdmf
 **************************************************************************************************/

#define CDMF		5

/**********************************************************************************************//**
 * \def	CDMG
 *
 * \brief	A macro that defines cdmg
 **************************************************************************************************/

#define CDMG		6

/**********************************************************************************************//**
 * \def	CDMH
 *
 * \brief	A macro that defines cdmh
 **************************************************************************************************/

#define CDMH		7

/**********************************************************************************************//**
 * \def	CDMI
 *
 * \brief	A macro that defines cdmi
 **************************************************************************************************/

#define CDMI		8

/**********************************************************************************************//**
 * \def	CDMJ
 *
 * \brief	A macro that defines cdmj
 **************************************************************************************************/

#define CDMJ		9

/**********************************************************************************************//**
 * \def	CDMK
 *
 * \brief	A macro that defines cdmk
 **************************************************************************************************/

#define CDMK		10

/**********************************************************************************************//**
 * \def	CDML
 *
 * \brief	A macro that defines cdml
 **************************************************************************************************/

#define CDML		11

/**********************************************************************************************//**
 * \def	CDMM
 *
 * \brief	A macro that defines cdmm
 **************************************************************************************************/

#define CDMM		12

/**********************************************************************************************//**
 * \def	CDMN
 *
 * \brief	A macro that defines cdmn
 **************************************************************************************************/

#define CDMN		13

/**********************************************************************************************//**
 * \def	CDMO
 *
 * \brief	A macro that defines cdmo
 **************************************************************************************************/

#define CDMO		14

/**********************************************************************************************//**
 * \def	CDMP
 *
 * \brief	A macro that defines cdmp
 **************************************************************************************************/

#define CDMP		15

/**********************************************************************************************//**
 * \def	CDMQ
 *
 * \brief	A macro that defines cdmq
 **************************************************************************************************/

#define CDMQ		16

/**********************************************************************************************//**
 * \def	CDMR
 *
 * \brief	A macro that defines cdmr
 **************************************************************************************************/

#define CDMR		17

/**********************************************************************************************//**
 * \def	CDMS
 *
 * \brief	A macro that defines cdms
 **************************************************************************************************/

#define CDMS		18

/**********************************************************************************************//**
 * \def	CDMT
 *
 * \brief	A macro that defines cdmt
 **************************************************************************************************/

#define CDMT		19

/**********************************************************************************************//**
 * \def	CDMU
 *
 * \brief	A macro that defines cdmu
 **************************************************************************************************/

#define CDMU		20

/**********************************************************************************************//**
 * \def	CDMV
 *
 * \brief	A macro that defines cdmv
 **************************************************************************************************/

#define CDMV		21

/**********************************************************************************************//**
 * \def	CDMW
 *
 * \brief	A macro that defines cdmw
 **************************************************************************************************/

#define CDMW		22

/**********************************************************************************************//**
 * \def	CDMX
 *
 * \brief	A macro that defines cdmx
 **************************************************************************************************/

#define CDMX		23

/**********************************************************************************************//**
 * \def	CDMY
 *
 * \brief	A macro that defines cdmy
 **************************************************************************************************/

#define CDMY		24

/**********************************************************************************************//**
 * \def	CDMZ
 *
 * \brief	A macro that defines cdmz
 **************************************************************************************************/

#define CDMZ		25

/**********************************************************************************************//**
 * \def	CDMLALT
 *
 * \brief	A macro that defines cdmlalt
 **************************************************************************************************/

#define CDMLALT		26

/**********************************************************************************************//**
 * \def	CDMLSHIFT
 *
 * \brief	A macro that defines cdmlshift
 **************************************************************************************************/

#define CDMLSHIFT	27

/**********************************************************************************************//**
 * \def	CDMLCTRL
 *
 * \brief	A macro that defines cdmlctrl
 **************************************************************************************************/

#define CDMLCTRL	28

/**********************************************************************************************//**
 * \def	CDMRALT
 *
 * \brief	A macro that defines cdmralt
 **************************************************************************************************/

#define CDMRALT		29

/**********************************************************************************************//**
 * \def	CDMRSHIFT
 *
 * \brief	A macro that defines cdmrshift
 **************************************************************************************************/

#define CDMRSHIFT	30

/**********************************************************************************************//**
 * \def	CDMRCTRL
 *
 * \brief	A macro that defines cdmrctrl
 **************************************************************************************************/

#define CDMRCTRL	31

/**********************************************************************************************//**
 * \def	CDMESC
 *
 * \brief	A macro that defines cdmesc
 **************************************************************************************************/

#define CDMESC		32

/**********************************************************************************************//**
 * \def	CDMRETURN
 *
 * \brief	A macro that defines cdmreturn
 **************************************************************************************************/

#define CDMRETURN	33

/**********************************************************************************************//**
 * \def	CDM1
 *
 * \brief	A macro that defines cdm 1
 **************************************************************************************************/

#define CDM1		34

/**********************************************************************************************//**
 * \def	CDM2
 *
 * \brief	A macro that defines cdm 2
 **************************************************************************************************/

#define CDM2		35

/**********************************************************************************************//**
 * \def	CDM3
 *
 * \brief	A macro that defines cdm 3
 **************************************************************************************************/

#define CDM3		36

/**********************************************************************************************//**
 * \def	CDM4
 *
 * \brief	A macro that defines cdm 4
 **************************************************************************************************/

#define CDM4		37

/**********************************************************************************************//**
 * \def	CDM5
 *
 * \brief	A macro that defines cdm 5
 **************************************************************************************************/

#define CDM5		38

/**********************************************************************************************//**
 * \def	CDM6
 *
 * \brief	A macro that defines cdm 6
 **************************************************************************************************/

#define CDM6		39

/**********************************************************************************************//**
 * \def	CDM7
 *
 * \brief	A macro that defines cdm 7
 **************************************************************************************************/

#define CDM7		40

/**********************************************************************************************//**
 * \def	CDM8
 *
 * \brief	A macro that defines cdm 8
 **************************************************************************************************/

#define CDM8		41

/**********************************************************************************************//**
 * \def	CDM9
 *
 * \brief	A macro that defines cdm 9
 **************************************************************************************************/

#define CDM9		42

/**********************************************************************************************//**
 * \def	CDM0
 *
 * \brief	A macro that defines cdm 0
 **************************************************************************************************/

#define CDM0		43

/**********************************************************************************************//**
 * \def	CDMCOMMA
 *
 * \brief	A macro that defines cdmcomma
 **************************************************************************************************/

#define CDMCOMMA	47

/**********************************************************************************************//**
 * \def	CDMPERIOD
 *
 * \brief	A macro that defines cdmperiod
 **************************************************************************************************/

#define CDMPERIOD	48

/**********************************************************************************************//**
 * \def	CDMBACKS
 *
 * \brief	A macro that defines cdmbacks
 **************************************************************************************************/

#define CDMBACKS	49

/**********************************************************************************************//**
 * \def	CDMLEFT
 *
 * \brief	A macro that defines cdmleft
 **************************************************************************************************/

#define CDMLEFT		50

/**********************************************************************************************//**
 * \def	CDMRIGHT
 *
 * \brief	A macro that defines cdmright
 **************************************************************************************************/

#define CDMRIGHT	51

/**********************************************************************************************//**
 * \def	CDMUP
 *
 * \brief	A macro that defines cdmup
 **************************************************************************************************/

#define CDMUP		52

/**********************************************************************************************//**
 * \def	CDMDOWN
 *
 * \brief	A macro that defines cdmdown
 **************************************************************************************************/

#define CDMDOWN		53

/**********************************************************************************************//**
 * \def	CDMSPACE
 *
 * \brief	A macro that defines cdmspace
 **************************************************************************************************/

#define CDMSPACE    54

/**********************************************************************************************//**
 * \def	CDMLMB
 *
 * \brief	A macro that defines cdmlmb
 **************************************************************************************************/

#define CDMLMB		55

/**********************************************************************************************//**
 * \def	CDMRMB
 *
 * \brief	A macro that defines cdmrmb
 **************************************************************************************************/

#define CDMRMB		56

/**********************************************************************************************//**
 * \def	CDMMMB
 *
 * \brief	A macro that defines cdmmmb
 **************************************************************************************************/

#define CDMMMB		57
#pragma endregion !Inputs

#pragma endregion !Defines

/**********************************************************************************************//**
 * \typedef	SMALL_RECT CDMRect
 *
 * \brief	Defines an alias representing the cdm rectangle
 **************************************************************************************************/

typedef SMALL_RECT		CDMRect;

/**********************************************************************************************//**
 * \typedef	COORD CDMCoord
 *
 * \brief	Defines an alias representing the cdm coordinate
 **************************************************************************************************/

typedef COORD			CDMCoord;

/**********************************************************************************************//**
 * \typedef	char CDMEnum
 *
 * \brief	Defines an alias representing the cdm enum
 **************************************************************************************************/

typedef char			CDMEnum;

/**********************************************************************************************//**
 * \typedef	unsigned char CDMBool
 *
 * \brief	Defines an alias representing the cdm bool
 **************************************************************************************************/

typedef unsigned char	CDMBool;

/**********************************************************************************************//**
 * \typedef	unsigned char CDMErrno
 *
 * \brief	Defines an alias representing the cdm errno
 **************************************************************************************************/

typedef unsigned char	CDMErrno;

/**********************************************************************************************//**
 * \struct	CDMTiles
 *
 * \brief	A cdm tiles.
 **************************************************************************************************/

typedef struct CDMTiles
{
	/** \brief	The print buffer container */
	CHAR_INFO		*printBufferCont;

	/**********************************************************************************************//**
	 * \property	CDMBool *alreadyDrawn, *isAlphaTile
	 *
	 * \brief	Gets the is alpha tile
	 *
	 * \return	The is alpha tile.
	 **************************************************************************************************/

	CDMBool			*alreadyDrawn,
					*isAlphaTile;
}CDMTiles;

/**********************************************************************************************//**
 * \struct	CDMEvent
 *
 * \brief	A cdm event.
 **************************************************************************************************/

typedef struct CDMEvent {
	/** \brief	The inputs[ 51] */
	INPUT_RECORD	inputs[51];
	/** \brief	The input number */
	__int32			inputNum;
	/** \brief	The input pressed[ 64] */
	CDMBool			inputPressed[64];
}CDMEvent;

/**********************************************************************************************//**
 * \struct	CDMContext
 *
 * \brief	A cdm context.
 **************************************************************************************************/

typedef struct CDMContext
{
	/**********************************************************************************************//**
	 * \property	HANDLE mainBuffer, backBuffer, InputBuffer
	 *
	 * \brief	Gets the buffer for input data
	 *
	 * \return	A buffer for input data.
	 **************************************************************************************************/

	HANDLE							mainBuffer,
									backBuffer,
									InputBuffer;
	/** \brief	The main buffer active */
	CDMBool							mainBufferActive;
	/** \brief	The inf */
	CONSOLE_SCREEN_BUFFER_INFOEX	inf;
	/** \brief	The contents */
	CDMTiles						contents;
	/** \brief	The rectangle */
	CDMRect							rect;

}CDMContext;

/**********************************************************************************************//**
 * \struct	CDMPixelData
 *
 * \brief	A cdm pixel data.
 **************************************************************************************************/

typedef struct CDMPixelData
{
	/**********************************************************************************************//**
	 * \property	unsigned char character, frontColor, backColor
	 *
	 * \brief	Gets the color of the back
	 *
	 * \return	The color of the back.
	 **************************************************************************************************/

	unsigned char	character,
					frontColor,
					backColor;
}CDMPixelData;

/**********************************************************************************************//**
 * \struct	CDMPalette
 *
 * \brief	A cdm palette.
 **************************************************************************************************/

typedef struct CDMPalette
{
	/**********************************************************************************************//**
	 * \property	CDMPixelData p1, p2, p3, p4
	 *
	 * \brief	Gets the p 4
	 *
	 * \return	The p 4.
	 **************************************************************************************************/

	CDMPixelData	p1,
					p2,
					p3,
					p4;
}CDMPalette;

/**********************************************************************************************//**
 * \struct	CDMSurface
 *
 * \brief	A cdm surface.
 **************************************************************************************************/

typedef struct CDMSurface 
{
	/** \brief	The pallete */
	CDMPalette			pallete;
	/** \brief	The rectangle */
	CDMRect				rect;
	/** \brief	The data */
	CDMEnum				*data;
	/** \brief	The buffer contents */
	CDMTiles			bufferContents;
}CDMSurface;

/**********************************************************************************************//**
 * \struct	CDMText
 *
 * \brief	A cdm text.
 **************************************************************************************************/

typedef struct CDMText
{
	/**********************************************************************************************//**
	 * \property	short frontColor, backColor
	 *
	 * \brief	Gets the color of the back
	 *
	 * \return	The color of the back.
	 **************************************************************************************************/

	short		frontColor,
				backColor;
	/** \brief	The data */
	char		*data;
	/** \brief	The rectangle */
	CDMRect		rect;
	/** \brief	The buffer contents */
	CDMTiles	bufferContents;
}CDMText;

/*
*	This structure serves the purpose of a color palette. 
*	You can select which palette is active and displaying at any time 
*	using 
*	Default values for colors.
*	{ 0x00362b00,		//Black 
*	0x00423607,		//Gray
*	0x00756e58,		//Green
*	0x00837b65,		//Yellow
*	0x00969483,		//Blue
*	0x00a1a193,		//Aqua
*	0x00d5e8ee,		//White
*	0x00e3f6fd,		//BrightWhite
*	0x000089b5,		//BrightYellow
*	0x00164bcb,		//Red
*	0x002f32dc,		//LightRed
*	0x008236d3,		//LightPurple
*	0x00c4716c,		//Purple
*	0x00d28b26,		//LightBlue
*	0x0098a12a,		//LightAqua
*	0x00009985 };	//LightGreen
*/

/**********************************************************************************************//**
 * \struct	CDMColorScheme
 *
 * \brief	A cdm color scheme.
 **************************************************************************************************/

typedef struct CDMColorScheme 
{
	/** \brief	The colors[ 16] */
	COLORREF colors[16];
}CDMColorScheme;

#ifdef __cplusplus
/** \brief	. */
extern "C" {
#endif

	/**********************************************************************************************//**
	 * \fn	CDMContext* CDMCreateContext(const _IN_ short width, const _IN_ short height);
	 *
	 * \brief	The setup function of CDM. Must be called before anything else. CDM requires a
	 * 			context to work, most of the functions here require a context to be used. \warning
	 * 			This might not be thread safe.
	 *
	 * \param [in]	width 	The expected width in CDM pixels.
	 * \param [in]	height	The expected height in CDM pixels.
	 *
	 * \return	Null if it fails, else a pointer to a CDMContext.
	 **************************************************************************************************/

	CDMContext*	CDMCreateContext(const _IN_ short width, const _IN_ short height);

	/**********************************************************************************************//**
	 * \fn	void CDMChangeWindowSize(_INOUT_ CDMContext** ctx, const _IN_ short width, const _IN_ short height);
	 *
	 * \brief	Changes the window size of a context. May be called at any time, however it will
	 * 			clear the screen once its done.
	 *
	 * \param [in,out]	ctx		The context, must not be null.
	 * \param [in]	  	width 	The expected width in CDM pixels.
	 * \param [in]	  	height	The expected height in CDM pixels.
	 **************************************************************************************************/

	void		CDMChangeWindowSize(_INOUT_ CDMContext** ctx,
							const _IN_ short width,
							const _IN_ short height);

	/**********************************************************************************************//**
	 * \fn	void CDMToggleFullscreen(CDMContext** _INOUT_ ctx, const _IN_ CDMBool val);
	 *
	 * \brief	Toggles fullscreen mode.
	 *
	 * \param [in,out]	ctx	If non-null, the context.
	 * \param [in]	  	val	Boolean value for the toggle.
	 **************************************************************************************************/

	void		CDMToggleFullscreen(CDMContext** _INOUT_ ctx, const _IN_ CDMBool val);

	/**********************************************************************************************//**
	 * \fn	void CDMSetWindowTitle(const _IN_ char* title);
	 *
	 * \brief	Sets the title of the console. Just a wrapper for a WINAPI functionality.
	 *
	 * \param [in]	title	The title of the console.
	 **************************************************************************************************/

	void		CDMSetWindowTitle(const _IN_ char* title);

	/**********************************************************************************************//**
	 * \fn	void CDMSetFontAndSize(_IN_ CDMContext** ctx, const _IN_ wchar_t* fontName, const _IN_ short width, const _IN_ short height);
	 *
	 * \brief	Sets the font and font size of the console. The recommended font name is L"Terminal" for 
	 * 			its unique characteristic of allowing square pixels, however most fonts can be used.
	 * 			It's important to include L at the start of your string, since this function requires a 
	 * 			wchar_t* instead of a regular char. 
	 *
	 * \param [in,out]	ctx			The context, must not be null.
	 * \param [in]	  	fontName	Name of the font.
	 * \param [in]	  	width   	The width in regular pixels of the font.
	 * \param [in]	  	height  	The height in regular pixels of the font.
	 **************************************************************************************************/

	void		CDMSetFontAndSize(_INOUT_ CDMContext** ctx,
							const _IN_ wchar_t* fontName,
							const _IN_ short width,
							const _IN_ short height);

	/**********************************************************************************************//**
	 * \fn	void CDMSetCursorVisibility(_IN_ CDMContext** ctx, const _IN_ CDMBool status);
	 *
	 * \brief	Sets the visibility of the console's cursor.
	 *
	 * \param [in,out]	ctx   	If non-null, the context.
	 * \param 		  	status	Boolean value to set the status of the cursor.
	 **************************************************************************************************/

	void		CDMSetCursorVisibility(_INOUT_ CDMContext** ctx,
							const _IN_ CDMBool status);

	/**********************************************************************************************//**
	 * \fn	void CDMActivateMouseInput(_IN_ CDMContext** ctx);
	 *
	 * \brief	Activates mouse input recognition for the console.
	 *
	 * \param [in,out]	ctx	The context, must not be null.
	 **************************************************************************************************/

	void		CDMActivateMouseInput(_INOUT_ CDMContext** ctx);

	/**********************************************************************************************//**
	 * \fn	CDMSurface* CDMCreateSurface(const _IN_ short posX, const _IN_ short posY, const _IN_ short sizeX, const _IN_ short sizeY);
	 *
	 * \brief	Creates a surface. A surface is the base representation of an image in CDM
	 * 			Most every object used in CDM will most likely be a surface.
	 *
	 * \param [in]	posX 	The position x coordinate of the surface, using screen coordinates. 
	 * \param [in]	posY 	The position y coordinate of the surface, using screen coordinates.
	 * \param [in]	sizeX	The width of the surface.
	 * \param [in]	sizeY	The height of the surface.
	 *
	 * \return	Null if it fails, else a pointer to a CDMSurface.
	 **************************************************************************************************/

	CDMSurface*	CDMCreateSurface(const _IN_ short posX,
							const _IN_ short posY,
							const _IN_ short sizeX,
							const _IN_ short sizeY);

	/**********************************************************************************************//**
	 * \fn	CDMSurface* CDMReadImg(const _IN_ char* fileName, _OUTOPT_ CDMColorScheme* scheme);
	 *
	 * \brief	Reads a .cdi image file into a CDMSurface. The file must be generated exactly the
	 * 			same as CDMExportSrfcToImg, for it to work using this function. The usage of the 
	 * 			structure may be imperative.
	 *
	 * \param [in]	  		fileName	Filename of the file.
	 * \param [in,out,opt]	scheme  	If non-null, the scheme that will obtain the real scheme 
	 * 									used in the image.
	 *
	 * \return	Null if it fails, else a pointer to a CDMSurface.
	 **************************************************************************************************/

	CDMSurface*	CDMReadImg(const _IN_ char* fileName, _OUTOPT_ CDMColorScheme* scheme);

	/**********************************************************************************************//**
	 * \fn	void CDMExportSrfcToImg(const _IN_ CDMContext* ctx, const _IN_ CDMSurface* srfc, const _IN_ char* fileName, const _IN_ size_t nameSize);
	 *
	 * \brief	Cdm export srfc to image
	 *
	 * \param [in]	ctx			The current context, must not be null.
	 * \param [in]	srfc		The surface intended to export, must not be null.
	 * \param [in]	fileName	Filename of the file.
	 * \param [in]	nameSize	Size of the name.
	 **************************************************************************************************/

	void		CDMExportSrfcToImg(const _IN_ CDMContext* ctx,
							const _IN_ CDMSurface* srfc,
							const _IN_ char* fileName,
							const _IN_ size_t nameSize);

	/**********************************************************************************************//**
	 * \fn	CDMText* CDMTextWrapper(_IN_ char * text, const _IN_ CDMEnum color, const _IN_ CDMEnum background);
	 *
	 * \brief	Since CDM basically highjacks the console, functions like printf are unabled to be
	 * 			used. No output will be shown using them, instead you must use the text as an 
	 * 			object, this means you have much more control of the position and design of your 
	 * 			text, at the expense of making a little bit harder to use. Moreover, repeated uses 
	 * 			of the same text box will not require you to create a new object or call anything 
	 * 			else other than adding this object to the context, or drawing it directly.
	 *			All text begins in the ( 0 , 0 ) coordinate.
	 * 
	 * \param [in,out]	text	  	The text string, must not be null, must be zero terminated.
	 * \param [in]	  	color	  	The color of the text.
	 * \param [in]	  	background	The background color of the text.
	 *
	 * \return	Null if it fails, else a pointer to a CDMText.
	 *
	 * ### param [in]	 	textSize	Size of the text.
	 **************************************************************************************************/

	CDMText*	CDMTextWrapper(_IN_ char * text,
		const _IN_ CDMEnum color,
		const _IN_ CDMEnum background);

	/**********************************************************************************************//**
	 * \fn	CDMText* CDMTextWrapper_s(_IN_ char * text, const _IN_ size_t textSize, const _IN_ CDMEnum color, const _IN_ CDMEnum background);
	 *
	 * \brief	Since CDM basically highjacks the console, functions like printf are unabled to be
	 * 			used. No output will be shown using them, instead you must use the text as an 
	 * 			object, this means you have much more control of the position and design of your 
	 * 			text, at the expense of making a little bit harder to use. Moreover, repeated uses 
	 * 			of the same text box will not require you to create a new object or call anything 
	 * 			else other than adding this object to the context, or drawing it directly.
	 * 			All text begins in the ( 0 , 0 ) coordinate.
	 *
	 * \param [in,out]	text	  	The text string, must not be null.
	 * \param [in]	  	textSize  	Size of the text.
	 * \param [in]	  	color	  	The color of the text.
	 * \param [in]	  	background	The background color of the text.
	 *
	 * \return	Null if it fails, else a pointer to a CDMText.
	 **************************************************************************************************/

	CDMText*	CDMTextWrapper_s(_IN_ char * text,
							const _IN_ size_t textSize,
							const _IN_ CDMEnum color,
							const _IN_ CDMEnum background);

	/**********************************************************************************************//**
	 * \fn	void CDMChangeText(CDMText** txt, const _IN_ char * text);
	 *
	 * \brief	Changes the text content of a CDMText.
	 *
	 * \param [in,out]	txt 	The text object, must not be null.
	 * \param [in]	  	text	The text, null terminated.
	 **************************************************************************************************/

	void		CDMChangeText(CDMText** txt, const _IN_ char * text);
	/**********************************************************************************************//**
	 * \fn	void CDMSetForegroundColor(_IN_ CDMSurface** surface, const _IN_ CDMEnum c1, const _IN_ CDMEnum c2, const _IN_ CDMEnum c3, const _IN_ CDMEnum c4);
	 *
	 * \brief	A CDMSurface may only have 4 color sets at a time. Including background, foreground and
	 * 			character. Each combination of 3 of those elements makes a set. 
	 * 			This function sets directly the four foreground colors that the Surface will use from the
	 * 			color palette.
	 *
	 * \param [in,out]	surface	The surface, must not be null.
	 * \param [in]	  	c1	   	The first CDMEnum using color macros.
	 * \param [in]	  	c2	   	The second CDMEnum using color macros.
	 * \param [in]	  	c3	   	The third CDMEnum using color macros.
	 * \param [in]	  	c4	   	The fourth CDMEnum using color macros.
	 **************************************************************************************************/

	void		CDMSetForegroundColor(_INOUT_ CDMSurface** surface,
							const _IN_ CDMEnum c1,
							const _IN_ CDMEnum c2,
							const _IN_ CDMEnum c3,
							const _IN_ CDMEnum c4);

	/**********************************************************************************************//**
	 * \fn	void CDMSetBackgroundColor(_IN_ CDMSurface** surface, const _IN_ CDMEnum c1, const _IN_ CDMEnum c2, const _IN_ CDMEnum c3, const _IN_ CDMEnum c4);
	 *
	 * \brief	A CDMSurface may only have 4 color sets at a time. Including background, foreground and
	 * 			character. Each combination of 3 of those elements makes a set.
	 * 			This function sets directly the four background colors that the Surface will use from the
	 * 			color palette.
	 * 			
	 * \param [in,out]	surface	The surface, must not be null.
	 * \param [in]	  	c1	   	The first CDMEnum using color macros.
	 * \param [in]	  	c2	   	The second CDMEnum using color macros.
	 * \param [in]	  	c3	   	The third CDMEnum using color macros.
	 * \param [in]	  	c4	   	The fourth CDMEnum using color macros.
	 **************************************************************************************************/

	void		CDMSetBackgroundColor(_INOUT_ CDMSurface** surface,
							const _IN_ CDMEnum c1,
							const _IN_ CDMEnum c2,
							const _IN_ CDMEnum c3,
							const _IN_ CDMEnum c4);

	/**********************************************************************************************//**
	 * \fn	void CDMSetCharacters(_IN_ CDMSurface** surface, const _IN_ CDMEnum c1, const _IN_ CDMEnum c2, const _IN_ CDMEnum c3, const _IN_ CDMEnum c4);
	 *
	 * \brief	A CDMSurface may only have 4 color sets at a time. Including background, foreground and
	 * 			character. Each combination of 3 of those elements makes a set.
	 * 			This function sets directly the four characters that the Surface will use.
	 *
	 * \param [in,out]	surface	The surface, must not be null.
	 * \param [in]	  	c1	   	The first CDMEnum using color macros.
	 * \param [in]	  	c2	   	The second CDMEnum using color macros.
	 * \param [in]	  	c3	   	The third CDMEnum using color macros.
	 * \param [in]	  	c4	   	The fourth CDMEnum using color macros.
	 **************************************************************************************************/

	void		CDMSetCharacters(_INOUT_ CDMSurface** surface,
							const _IN_ CDMEnum c1,
							const _IN_ CDMEnum c2,
							const _IN_ CDMEnum c3,
							const _IN_ CDMEnum c4);

	/**********************************************************************************************//**
	 * \fn	int CDMSwapBuffer(_IN_ CDMContext* const ctx);
	 *
	 * \brief	CDM runs in a two buffers rendering architecture. Swapping the buffers will be necessary
	 * 			for CDM to draw properly. Calling this function easies things a lot.
	 *
	 * \param [in,out]	The context, must not be null.
	 *
	 * \return	The index of the new current buffer.
	 **************************************************************************************************/

	int			CDMSwapBuffer(_IN_ CDMContext* const ctx);

	/**********************************************************************************************//**
	 * \fn	void CDMFreeSurface(_IN_ CDMSurface** surface);
	 *
	 * \brief	Simple dynamic memory allocation free method.
	 *
	 * \param [in,out]	surface	The surface, must not be null.
	 * 							Upon finishing this function makes this parameter's value null.
	 **************************************************************************************************/

	void		CDMFreeSurface(_INOUT_ CDMSurface** surface);

	/**********************************************************************************************//**
	 * \fn	void CDMFreeText(_IN_ CDMText** txt);
	 *
	 * \brief	Simple dynamic memory allocation free method.
	 *
	 * \param [in,out]	txt The text, must not be null.
	 * 						Upon finishing, this function makes this parameter's value null.
	 **************************************************************************************************/

	void		CDMFreeText(_INOUT_ CDMText** txt);

	/**********************************************************************************************//**
	 * \fn	void CDMFreeContext(_IN_ CDMContext** ctx);
	 *
	 * \brief	Simple dynamic memory allocation free method.
	 *
	 * \param [in,out]	ctx The context, must not be null.
	 * 						Upon finishing, this function makes this parameter's value null.
	 **************************************************************************************************/

	void		CDMFreeContext(_INOUT_ CDMContext** ctx);

	/**********************************************************************************************//**
	 * \fn	void CDMPrepareSurface(_IN_ CDMSurface** surface);
	 *
	 * \brief	This should only be called each time the surface's contents were modified before calling
	 * 			a draw or add function. 
	 * 			Internally this function converts the image's values to raw data that the console
	 * 			understands.
	 *
	 * \param [in,out]	surface The surface, must not be null.
	 **************************************************************************************************/

	void		CDMPrepareSurface(_INOUT_ CDMSurface** surface);

	/**********************************************************************************************//**
	 * \fn	void CDMPrepareText(_IN_ CDMText** txt);
	 *
	 * \brief	This should only be called each time the text's contents were modified before calling
	 * 			a draw or add function. 
	 * 			Internally this function converts the text's values to raw data that the console
	 * 			understands.
	 *
	 * \param [in,out]	txt	The text, must not be null.
	 **************************************************************************************************/

	void		CDMPrepareText(_INOUT_ CDMText** txt);

	/**********************************************************************************************//**
	 * \fn	void CDMDrawSurface(_IN_ CDMContext ** ctx, _IN_ CDMSurface * surface);
	 *
	 * \brief	Draws directly a surface in the context, instead of batching it with other draws.
	 * 			I highly recommend using the batch function (Add, then CDMDraw) over this one,
	 * 			to make the program run faster.
	 *
	 * \param [in,out]	ctx	   	The context in which the surface will be painted, must not be null.
	 * \param [in,out]	surface	The surface to be printed, must not be null.
	 **************************************************************************************************/

	void		CDMDrawSurface(_INOUT_ CDMContext ** ctx, _IN_ CDMSurface * surface);

	/**********************************************************************************************//**
	 * \fn	void CDMAddSurfaceToContext(_IN_ CDMContext** ctx, _IN_ CDMSurface* surface);
	 *
	 * \brief	Adds a surface to the context, and thus batching its draw with every other added object,
	 * 			the batch will be completely flushed once CDMDraw is called. 
	 *
	 * \param [in,out]	ctx	   	The context in which the surface will be painted, must not be null.
	 * \param [in,out]	surface	The surface to be printed, must not be null.
	 **************************************************************************************************/

	void		CDMAddSurfaceToContext(_INOUT_ CDMContext** ctx, _IN_ CDMSurface* surface);

	/**********************************************************************************************//**
	 * \fn	void CDMDrawText(_IN_ CDMContext ** ctx, _IN_ CDMText * txt);
	 *
	 * \brief	Draws directly a text in the context, instead of batching it with other draws.
	 * 			I highly recommend using the batch function (Add, then CDMDraw) over this one,
	 * 			to make the program run faster.
	 *
	 * \param [in,out]	ctx	The context in which the text will be painted, must not be null.
	 * \param [in,out]	txt	The text that will be printed, must not be null.
	 **************************************************************************************************/

	void		CDMDrawText(_INOUT_ CDMContext ** ctx, _IN_ CDMText * txt);

	/**********************************************************************************************//**
	 * \fn	void CDMAddTextToContext(_IN_ CDMContext** ctx, _IN_ CDMText* txt);
	 *
	 * \brief	Adds a text to the context, and thus batching its draw with every other added object,
	 * 			the batch will be completely flushed once CDMDraw is called.
	 *
	 * \param [in,out]	ctx	The context in which the text will be painted, must not be null.
	 * \param [in,out]	txt	The text that will be printed, must not be null.
	 **************************************************************************************************/

	void		CDMAddTextToContext(_INOUT_ CDMContext** ctx, _IN_ CDMText* txt);

	//TODO: CONTINUE HERE
	/**********************************************************************************************//**
	 * \fn	void CDMSetColorRGB(_IN_ CDMColorScheme* data, _IN_ short position, _IN_ short r, _IN_ short g, _IN_ short b);
	 *
	 * \brief	Cdm set color RGB
	 *
	 * \param [in,out]	data		If non-null, the data.
	 * \param 		  	position	The position.
	 * \param 		  	r			A short to process.
	 * \param 		  	g			A short to process.
	 * \param 		  	b			A short to process.
	 **************************************************************************************************/

	void		CDMSetColorRGB(_INOUT_ CDMColorScheme* data,
							_IN_ short position,
							_IN_ short r, 
							_IN_ short g, 
							_IN_ short b);

	/**********************************************************************************************//**
	 * \fn	void CDMSetColorBin(_IN_ CDMColorScheme* data, _IN_ short position, const _IN_ DWORD color);
	 *
	 * \brief	Cdm set color bin
	 *
	 * \param [in,out]	data		If non-null, the data.
	 * \param 		  	position	The position.
	 * \param 		  	color   	The color.
	 **************************************************************************************************/

	void		CDMSetColorBin(_INOUT_ CDMColorScheme* data,
							_IN_ short position,
							const _IN_ DWORD color);

	/**********************************************************************************************//**
	 * \fn	void CDMClearScreen(_IN_ CDMContext ** ctx);
	 *
	 * \brief	Cdm clear screen
	 *
	 * \param [in,out]	ctx	If non-null, the context.
	 **************************************************************************************************/

	void		CDMClearScreen(_INOUT_ CDMContext ** ctx);

	/**********************************************************************************************//**
	 * \fn	void CDMDraw(_IN_ CDMContext* ctx);
	 *
	 * \brief	Cdm draw
	 *
	 * \param [in,out]	ctx	If non-null, the context.
	 **************************************************************************************************/

	void		CDMDraw(_IN_ CDMContext* ctx);

	/**********************************************************************************************//**
	 * \fn	int CDMGetR(_IN_ CDMColorScheme* data, const _IN_ short position);
	 *
	 * \brief	Cdm get r
	 *
	 * \param [in,out]	data		If non-null, the data.
	 * \param 		  	position	The position.
	 *
	 * \return	An int.
	 **************************************************************************************************/

	int			CDMGetR(_IN_ CDMColorScheme* data, const _IN_ short position);

	/**********************************************************************************************//**
	 * \fn	int CDMGetG(_IN_ CDMColorScheme* data, const _IN_ short position);
	 *
	 * \brief	Cdm get g
	 *
	 * \param [in,out]	data		If non-null, the data.
	 * \param 		  	position	The position.
	 *
	 * \return	An int.
	 **************************************************************************************************/

	int			CDMGetG(_IN_ CDMColorScheme* data, const _IN_ short position);

	/**********************************************************************************************//**
	 * \fn	int CDMGetB(_IN_ CDMColorScheme* data, const _IN_ short position);
	 *
	 * \brief	Cdm get b
	 *
	 * \param [in,out]	data		If non-null, the data.
	 * \param 		  	position	The position.
	 *
	 * \return	An int.
	 **************************************************************************************************/

	int			CDMGetB(_IN_ CDMColorScheme* data, const _IN_ short position);

	/**********************************************************************************************//**
	 * \fn	void CDMSetActiveScheme(_IN_ CDMColorScheme data, _IN_ CDMContext** ctx);
	 *
	 * \brief	Cdm set active scheme
	 *
	 * \param 		  	data	The data.
	 * \param [in,out]	ctx 	If non-null, the context.
	 **************************************************************************************************/

	void		CDMSetActiveScheme(_IN_ CDMColorScheme data, _INOUT_ CDMContext** ctx);

	/**********************************************************************************************//**
	 * \fn	void CDMSetPixel(_IN_ CDMSurface** surface, _IN_ short x, _IN_ short y, _IN_ CDMEnum pixelSet);
	 *
	 * \brief	Cdm set pixel
	 *
	 * \param [in,out]	surface 	If non-null, the surface.
	 * \param 		  	x			A short to process.
	 * \param 		  	y			A short to process.
	 * \param 		  	pixelSet	Set the pixel belongs to.
	 **************************************************************************************************/

	void		CDMSetPixel(_INOUT_ CDMSurface** surface,
							_IN_ short x,
							_IN_ short y,
							_IN_ CDMEnum pixelSet);

	/**********************************************************************************************//**
	 * \fn	CDMBool CDMCompareCHARINFO(_IN_ CHAR_INFO rhs, _IN_ CHAR_INFO lhs);
	 *
	 * \brief	Cdm compare charinfo
	 *
	 * \param	rhs	The right hand side.
	 * \param	lhs	The left hand side.
	 *
	 * \return	A CDMBool.
	 **************************************************************************************************/

	CDMBool		CDMCompareCHARINFO(_IN_ CHAR_INFO rhs, _IN_ CHAR_INFO lhs);

	/**********************************************************************************************//**
	 * \fn	void CDMPollEvents(_IN_ CDMContext* ctx, _IN_ CDMEvent* event);
	 *
	 * \brief	Cdm poll events
	 *
	 * \param [in,out]	ctx  	If non-null, the context.
	 * \param [in,out]	event	If non-null, the event.
	 **************************************************************************************************/

	void		CDMPollEvents(_IN_ CDMContext* ctx, _INOUT_ CDMEvent* event);

	/**********************************************************************************************//**
	 * \fn	CDMBool CDMGetKeyPressed(_IN_ CDMEvent* event, const _IN_ CDMEnum key);
	 *
	 * \brief	Cdm get key pressed
	 *
	 * \param [in,out]	event	If non-null, the event.
	 * \param 		  	key  	The key.
	 *
	 * \return	A CDMBool.
	 **************************************************************************************************/

	CDMBool		CDMGetKeyPressed(_IN_ CDMEvent* event, const _IN_ CDMEnum key);

	/**********************************************************************************************//**
	 * \fn	CDMBool CDMGetKeyDown(_IN_ CDMEvent* event, const _IN_ CDMEnum key);
	 *
	 * \brief	Cdm get key down
	 *
	 * \param [in,out]	event	If non-null, the event.
	 * \param 		  	key  	The key.
	 *
	 * \return	A CDMBool.
	 **************************************************************************************************/

	CDMBool		CDMGetKeyDown(_IN_ CDMEvent* event, const _IN_ CDMEnum key);

	/**********************************************************************************************//**
	 * \fn	CDMBool CDMGetKeyUp(_IN_ CDMEvent* event, const _IN_ CDMEnum key);
	 *
	 * \brief	Cdm get key up
	 *
	 * \param [in,out]	event	If non-null, the event.
	 * \param 		  	key  	The key.
	 *
	 * \return	A CDMBool.
	 **************************************************************************************************/

	CDMBool		CDMGetKeyUp(_IN_ CDMEvent* event, const _IN_ CDMEnum key);

	/**********************************************************************************************//**
	 * \fn	CDMCoord CDMGetMousePos(_IN_ CDMEvent* event);
	 *
	 * \brief	Cdm get mouse position
	 *
	 * \param [in,out]	event	If non-null, the event.
	 *
	 * \return	A CDMCoord.
	 **************************************************************************************************/

	CDMCoord	CDMGetMousePos(_IN_ CDMEvent* event);

	/**********************************************************************************************//**
	 * \fn	void CDMKeepScreenSize(_IN_ CDMContext** ctx, _IN_ CDMEvent* event);
	 *
	 * \brief	Cdm keep screen size
	 *
	 * \param [in,out]	ctx  	If non-null, the context.
	 * \param [in,out]	event	If non-null, the event.
	 **************************************************************************************************/

	void		CDMKeepScreenSize(_INOUT_ CDMContext** ctx, _IN_ CDMEvent* event);

	/**********************************************************************************************//**
	 * \fn	void CDMSetErrno(const _IN_ CDMErrno code);
	 *
	 * \brief	Cdm set errno
	 *
	 * \param	code	The code.
	 **************************************************************************************************/

	void		CDMSetErrno(const _IN_ CDMErrno code);

	/**********************************************************************************************//**
	 * \fn	CDMErrno CDMGetErrno();
	 *
	 * \brief	Cdm get errno
	 *
	 * \return	A CDMErrno.
	 **************************************************************************************************/

	CDMErrno	CDMGetErrno();

	/**********************************************************************************************//**
	 * \fn	char* CDMGetErrorMessage();
	 *
	 * \brief	Cdm get error message
	 *
	 * \return	Null if it fails, else a pointer to a char.
	 **************************************************************************************************/

	char*		CDMGetErrorMessage();

	/**********************************************************************************************//**
	 * \fn	void CDMClearErrno();
	 *
	 * \brief	Cdm clear errno
	 **************************************************************************************************/

	void		CDMClearErrno();

#ifdef __cplusplus
}
#endif
